#%RAML 1.0
title: Example RAML 1.0
version: 1
baseUri: http://example.com/{version}
documentation:
  - title: Welcome
    content: |
      Welcome to the Example Documentation. The Example API allows you
      to do stuff. See also [example.com](https://www.example.com).

      ```javascript
      var raml2html = require('raml2html');

      // Using the default templates:
      // source can either be a filename, file contents (string) or parsed RAML object
      raml2html.parse(source, onSuccess, onError);

      // Using your own templates:
      // - config should be an object with at least an `template` property
      // - config can also include `helpers` and `partials`
      // - the config object will be accessible from your handlebars templates
      raml2html.parseWithConfig(source, config, onSuccess, onError);
      ```
  - title: Chapter two
    content: |
      More content here. Including **bold** text!

      Small table:

      | A | B | C |
      |---|---|---|
      | 1 | 2 | 3 |

      Done

securitySchemes:
  Unauthenticated: !include unauthenticated.raml
  oauth_1_0:
    description: OAuth 1.0 continues to be supported for all API requests, but OAuth 2.0 is now preferred.
    type: OAuth 1.0
    settings:
      requestTokenUri: https://api.dropbox.com/1/oauth/request_token
      authorizationUri: https://www.dropbox.com/1/oauth/authorize
      tokenCredentialsUri: https://api.dropbox.com/1/oauth/access_token

traits:
  paged:
    queryParameters:
      page_size:
        description: The number of items per page
        type: number
        default: 20
      page:
        description: The page to return
        type: number
        default: 0
    headers:
      TESTING:
        type: string
        description: does a trait render its headers?

types:
  Email:
    type: string
    pattern: ^.+@.+\..+$
  Account:
    properties:
      name: string
      email: Email
      gender:
        type: string
        enum: [ "male", "female" ]
        required: false
  PasswordProtectedAccount:
    type: Account
    properties:
      password: string
    example: |
      {
        "email": "john@example.com",
        "password": "super_secret",
        "name": "John Doe"
      }
  AdminAccount:
    type: Account
    displayName: Administrator Account
    description: |
      A special account with administration access.
  UserName:
    type: string
    minLength: 3
    maxLength: 50
  User:
    properties:
      name:
        type: string
        maxLength: 30
      phone:
        type: string
        minLength: 10
        maxLength: 10

/account:
  displayName: ACCOUNT

  description: |
    This is the top level description for /account.
    * One
    * Two
    * Three

  post:
    description: |
      Creates a new account. Some **bold** text here. More text. Need to fill the line, so make it longer still. Hooray!
      Line two

      Paragraph two
    body:
      application/json:
        type: PasswordProtectedAccount
        examples:
          One: |
            {
              "email": "john@example.com",
              "password": "super_secret",
              "name": "John Doe"
            }
          Two:
            value:
              {
                "email": "john2@example.com",
                "password": "super_secret",
                "name": "John Doe II"
              }
            displayName: "Another Account"
            description: |
              This shows another password protected account.
              - Passwords are case-sensitive
              - Passwords *must* have a non-alpha-numeric character
      application/x-yaml:
        type: PasswordProtectedAccount
        example:
          email: john@example.com
          password: super_secret
          name: John Doe
    responses:
      200:
        description: Account was created and user is now logged in

  /find:
    get:
      description: find an account
      queryParameters:
        name:
          description: name on account
          required: true
          example: Naruto Uzumaki
        gender:
          enum: ["male", "female"]
          required: true
        number:
          type: integer
          default: 42
  /{id}:
    uriParameters:
      id:
        type: string
        description: account identifier
        minLength: 1
        maxLength: 10
    get:
      headers:
        Authorization:
          type: string
          description: Basic authentication header
          example: |
            Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==
      responses:
        200:
          description: Returns an account
          body:
            application/json:
              type: Account

    put:
      description: Update the account
      body:
        application/json:
          schema: |
            {
              "title": "Example Schema",
              "type": "object",
              "properties": {
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "age": {
                  "description": "Age in years",
                  "type": "integer",
                  "minimum": 0
                }
              },
              "required": ["firstName", "lastName"]
            }
        application/x-www-form-urlencoded:
          type: object
          properties:
            name:
              description: name on account
              type: string
            gender:
              enum: ["male", "female"]

    delete:
      description: Delete the account

  /login:
    post:
      description: Login with email and password
      body:
        application/json:
          example: |
            {
              "email": "john@example.com",
              "password": "super_secret"
            }
          examples:
            first: |
              {
                "email": "john@example.com",
                "password": "super_secret"
              }
            second: |
              {
                "email": "david@example.com",
                "password": "super_secret"
              }
      responses:
        200:
          description: Login was correct
          body:
            text/xml:
              example: |
                <test>This is a test</test>
              examples:
                first: |
                  <test>This is first test</test>
                second: |
                  <test>This is second test</test>
        400:
          description: Login was incorrect, please try again
        401:
          description: Not authorized
          headers:
            WWW-Authenticate:
              type: string
              description: user was not authorized
              example: |
                WWW-Authenticate: Basic realm="raml2html"

  /forgot:
    post:
      description: Sends an email to the user with a link to set a new password
      responses:
        200:
          description: Test
          body:
            text/xml:
              example: |
                <test>This is a test</test>

  /session:
    get:
      description: Gets the sessions

    delete:
      description: Deletes the session, logging out the user
  /admin:
    post:
      description: |
        Creates a new administrator account.
      body:
        application/json:
          type: AdminAccount
      responses:
        200:
          description: Account was created and user is now logged in
  /user:
    post:
      description: Test for multiple inheritence.
      body:
        application/json:
          type: [ Account, User ]

/accounts:
  displayName: ACCOUNTS

  post:
    description: |
      Creates multiple accounts.
    body:
      application/json:
        properties:
          count: number
          accounts: PasswordProtectedAccount
    responses:
      200:
        description: Accounts were created

/forecasts:
  displayName: Forecasts
  description: The very top resource - displays OK
  /{geoposition}:
    description: Overview endpoint to assemble and access forecast data in various timely resolutions - THIS IS NOT DISPLAYED ANYWHERE WITH RAML2HTML :/
    uriParameters:
      geoposition:
        description: A geoposition aquired by calling /geoposition/search - displays OK
        type: string
    get:
      description: Provides an overview of the available data - display OK
  /test:
    description: No methods here, but it does have a description


/conversations:
  description: This is the top level description for /conversations.
  securedBy: [oauth_1_0]

  get:
    description: Get a list of conversation for the current user

  post:
    description: Create a new conversions. The currently logged in user doesn't need to be supplied in the members list, it's implied.
    body:
      application/json:
        example: |
          {
            "content": "My message!",
            "members": [1, 2, 3]
          }
    responses:
      200:
        description: A conversation with these members already existed, the message was added to that one
      201:
        description: The conversation was created and the message added to it

  /{convId}:
    get:
      description: Get a single conversation including its messages

    put:
      description: Update a conversation (change members)

    /messages:
      get:
        is: [ paged ]
        description: Get the messages for the conversation

      post:
        description: Add a new message to a conversation

      /{messageId}:
        put:
          description: Update the message

        delete:
          description: Delete the message


/users:
  get:
    is: [ paged ]
    description: Get a list of all users
    queryParameters:
      from:
        description: Limit results to those created after from.
        example: '2014-12-31T00:00:00.000Z'
        type: string
        required: false

  post:
    description: Creates a new user
    body:
      application/xml:
        example: |
          <h1>Hello!</h1>

  /{userId}:
    get:
      description: Get the details of a user including a list of groups he belongs to

    put:
      description: Update a user

    delete:
      description: Deletes a user
  /name_{userName}_{account}:
    uriParameters:
      userName:
        description: The name of a user
        type: UserName
      account:
        description: The account
        type: Account
    get:
      description: Get all the users with a specific name



/groups:
  get:
    description: Get a list of all the groups

  post:
    description: Create a new group
    body:
      application/json:
        example: |
          {
            "name": "Cool people",
            "members": [1, 2, 3]
          }

  /{groupId}:
    get:
      description: Get the details of a group, including the member list

    put:
      description: Update the group, **optionally** supplying the new list of members (overwrites current list)
      body:
        application/json:
          example: |
            {
              "name": "Cool people",
              "members": [1, 2, 3]
            }

    delete:
      description: Removes the group

    /users:
      post:
        description: Adds a user to a group
        body:
          application/json:
            example: |
              {
                "user_id": 4
              }

      /{userId}:
        delete:
          description: Removes a user from a group
